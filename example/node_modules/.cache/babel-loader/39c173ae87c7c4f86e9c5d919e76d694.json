{"ast":null,"code":"import React, { useContext } from 'react';\nvar FeatureFlagContext = React.createContext([]);\n\nvar FeatureFlagProvider = function FeatureFlagProvider(_ref) {\n  var clientKey = _ref.clientKey,\n      children = _ref.children;\n  var flagsRetrieved = {\n    flags: ['A', 'B', 'C']\n  };\n  return /*#__PURE__*/React.createElement(FeatureFlagContext.Provider, {\n    value: flagsRetrieved\n  }, children);\n};\n\nvar FeatureFlag = function FeatureFlag(_ref2) {\n  var _ref2$flagName = _ref2.flagName,\n      _flagName = _ref2$flagName === void 0 ? '' : _ref2$flagName,\n      children = _ref2.children;\n\n  var context = useContext(FeatureFlagContext);\n  if (!context.flags.includes(_flagName)) return null;\n  return children;\n};\n\nexport { FeatureFlag, FeatureFlagProvider };","map":{"version":3,"sources":["../src/index.js"],"names":["FeatureFlagContext","React","FeatureFlagProvider","children","flagsRetrieved","flags","FeatureFlag","flagName","context","useContext"],"mappings":";AAEA,IAAMA,kBAAkB,GAAGC,KAAK,CAALA,aAAAA,CAA3B,EAA2BA,CAA3B;;IAEaC,mBAAmB,GAAG,SAAtBA,mBAAsB,OAA6B;AAAA,MAA5B,SAA4B,QAA5B,SAA4B;AAAA,MAAfC,QAAe,QAAfA,QAAe;AAC9D,MAAMC,cAAc,GAAG;AAAEC,IAAAA,KAAK,EAAE,CAAA,GAAA,EAAA,GAAA,EAAA,GAAA;AAAT,GAAvB;AACA,SAAA,aACE,KAAA,CAAA,aAAA,CAAC,kBAAD,CAAA,QAAA,EAAA;AAA6B,IAAA,KAAK,EAAED;AAApC,GAAA,EADF,QACE,CADF;AAKD,C;;IAEYE,WAAW,GAAG,SAAdA,WAAc,QAAiC;AAAA,6BAA9BC,QAA8B;AAAA,MAA9BA,SAA8B,+BAAhC,EAAgC;AAAA,MAAfJ,QAAe,SAAfA,QAAe;;AAC1D,MAAMK,OAAO,GAAGC,UAAU,CAA1B,kBAA0B,CAA1B;AACA,MAAI,CAACD,OAAO,CAAPA,KAAAA,CAAAA,QAAAA,CAAL,SAAKA,CAAL,EAAuC,OAAA,IAAA;AACvC,SAAA,QAAA;AACD,C","sourcesContent":["import React, { useContext } from 'react'\n\nconst FeatureFlagContext = React.createContext([])\n\nexport const FeatureFlagProvider = ({ clientKey, children }) => {\n  const flagsRetrieved = { flags: ['A', 'B', 'C'] }\n  return (\n    <FeatureFlagContext.Provider value={flagsRetrieved}>\n      {children}\n    </FeatureFlagContext.Provider>\n  )\n}\n\nexport const FeatureFlag = ({ flagName = '', children }) => {\n  const context = useContext(FeatureFlagContext)\n  if (!context.flags.includes(flagName)) return null\n  return children\n}\n"]},"metadata":{},"sourceType":"module"}