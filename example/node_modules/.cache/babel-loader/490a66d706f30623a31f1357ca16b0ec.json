{"ast":null,"code":"import _slicedToArray from \"/Users/christian/Desktop/code/togglr-js/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport React, { useState, useEffect, useContext } from 'react';\nimport firebase from 'firebase';\nlet database;\nvar firebaseConfig = {\n  apiKey: 'AIzaSyB0pXi3EBdc9p33uQvDMQG6SeCeuzpcHDk',\n  authDomain: 'react-togglr.firebaseapp.com',\n  databaseURL: 'https://react-togglr.firebaseio.com',\n  projectId: 'react-togglr',\n  storageBucket: 'react-togglr.appspot.com',\n  messagingSenderId: '883468833586',\n  appId: '1:883468833586:web:cf53cab617302ab2f87d2b',\n  measurementId: 'G-NHR0E20SST'\n};\ndatabase = firebase.initializeApp(firebaseConfig);\nfirebase.analytics();\nvar database$1 = database;\nconst FeatureFlagContext = React.createContext([]);\n\nconst FeatureFlagProvider = ({\n  organizationKey,\n  environment,\n  children\n}) => {\n  const _useState = useState({}),\n        _useState2 = _slicedToArray(_useState, 2),\n        flagsRetrieved = _useState2[0],\n        setFlagsRetrieved = _useState2[1];\n\n  useEffect(() => {\n    if (!organizationKey) {\n      console.error('togglr-js configiration error: No organizationKey set');\n      return;\n    }\n\n    const clientFlags = database$1.database().ref(\"organizations/\".concat(organizationKey, \"/flags\"));\n    clientFlags.on('value', snapshot => {\n      const flags = snapshot.val();\n      console.log('FLAGS', flags);\n\n      if (flags) {\n        setFlagsRetrieved(flags);\n      } else {\n        setFlagsRetrieved({});\n      }\n    });\n  }, []);\n  const FLAG_CONTEXT_DATA = {\n    environment,\n    flags: flagsRetrieved\n  };\n  return /*#__PURE__*/React.createElement(FeatureFlagContext.Provider, {\n    value: FLAG_CONTEXT_DATA\n  }, children);\n};\n\nconst FeatureFlag = ({\n  flagName: _flagName = '',\n  children\n}) => {\n  const context = useContext(FeatureFlagContext);\n  if (!Object.keys(context.flags).length) return null;\n  let on = false;\n  Object.keys(context.flags).forEach(key => {\n    const flag = context.flags[key];\n\n    if (flag.flagKeyName === _flagName && flag.active) {\n      console.log('HIT?', flag.environment);\n\n      if (flag.environment === '') {\n        on = true;\n      }\n    }\n  });\n  return on ? children : null;\n};\n\nexport { FeatureFlag, FeatureFlagProvider };","map":{"version":3,"sources":["../src/database.js","../src/index.js"],"names":["firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","database","firebase","FeatureFlagContext","React","FeatureFlagProvider","children","useState","useEffect","console","clientFlags","snapshot","flags","setFlagsRetrieved","FLAG_CONTEXT_DATA","flagsRetrieved","FeatureFlag","flagName","context","useContext","Object","on","key","flag"],"mappings":";;;AAEA,IAAA,QAAA;AAEA,IAAIA,cAAc,GAAG;AACnBC,EAAAA,MAAM,EADa,yCAAA;AAEnBC,EAAAA,UAAU,EAFS,8BAAA;AAGnBC,EAAAA,WAAW,EAHQ,qCAAA;AAInBC,EAAAA,SAAS,EAJU,cAAA;AAKnBC,EAAAA,aAAa,EALM,0BAAA;AAMnBC,EAAAA,iBAAiB,EANE,cAAA;AAOnBC,EAAAA,KAAK,EAPc,2CAAA;AAQnBC,EAAAA,aAAa,EAAE;AARI,CAArB;AAWAC,QAAQ,GAAGC,QAAQ,CAARA,aAAAA,CAAXD,cAAWC,CAAXD;AACAC,QAAQ,CAARA,SAAAA;AAEA,IAAA,UAAA,GAAA,QAAA;ACdA,MAAMC,kBAAkB,GAAGC,KAAK,CAALA,aAAAA,CAA3B,EAA2BA,CAA3B;;AAEA,MAAaC,mBAAmB,GAAG,CAAC;AAAA,EAAA,eAAA;AAAA,EAAA,WAAA;AAGlCC,EAAAA;AAHkC,CAAD,KAI7B;AAAA,oBACwCC,QAAQ,CAApD,EAAoD,CADhD;AAAA;AAAA,QACE,cADF;AAAA,QACE,iBADF;;AAGJC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAAJ,eAAA,EAAsB;AACpBC,MAAAA,OAAO,CAAPA,KAAAA,CAAAA,uDAAAA;AACA;AACD;;AAED,UAAMC,WAAW,GAAGT,UAAQ,CAARA,QAAAA,GAAAA,GAAAA,yBAApB,eAAoBA,YAApB;AAIAS,IAAAA,WAAW,CAAXA,EAAAA,CAAAA,OAAAA,EAAyBC,QAAD,IAAc;AACpC,YAAMC,KAAK,GAAGD,QAAQ,CAAtB,GAAcA,EAAd;AACAF,MAAAA,OAAO,CAAPA,GAAAA,CAAAA,OAAAA,EAAAA,KAAAA;;AAEA,UAAA,KAAA,EAAW;AACTI,QAAAA,iBAAiB,CAAjBA,KAAiB,CAAjBA;AADF,OAAA,MAEO;AACLA,QAAAA,iBAAiB,CAAjBA,EAAiB,CAAjBA;AACD;AARHH,KAAAA;AAVO,GAAA,EAATF,EAAS,CAATA;AAsBA,QAAMM,iBAAiB,GAAG;AAAA,IAAA,WAAA;AAExBF,IAAAA,KAAK,EAAEG;AAFiB,GAA1B;AAKA,SAAA,aACE,KAAA,CAAA,aAAA,CAAC,kBAAD,CAAA,QAAA,EAAA;AAA6B,IAAA,KAAK,EAAED;AAApC,GAAA,EADF,QACE,CADF;AAlCK,CAAP;;AAyCA,MAAaE,WAAW,GAAG,CAAC;AAAEC,EAAAA,QAAQ,EAARA,SAAQ,GAAV,EAAA;AAAiBX,EAAAA;AAAjB,CAAD,KAAiC;AAC1D,QAAMY,OAAO,GAAGC,UAAU,CAA1B,kBAA0B,CAA1B;AACA,MAAI,CAACC,MAAM,CAANA,IAAAA,CAAYF,OAAO,CAAnBE,KAAAA,EAAL,MAAA,EAAwC,OAAA,IAAA;AAIxC,MAAIC,EAAE,GAAN,KAAA;AAEAD,EAAAA,MAAM,CAANA,IAAAA,CAAYF,OAAO,CAAnBE,KAAAA,EAAAA,OAAAA,CAAoCE,GAAD,IAAS;AAC1C,UAAMC,IAAI,GAAGL,OAAO,CAAPA,KAAAA,CAAb,GAAaA,CAAb;;AACA,QAAIK,IAAI,CAAJA,WAAAA,KAAAA,SAAAA,IAAiCA,IAAI,CAAzC,MAAA,EAAkD;AAChDd,MAAAA,OAAO,CAAPA,GAAAA,CAAAA,MAAAA,EAAoBc,IAAI,CAAxBd,WAAAA;;AACA,UAAIc,IAAI,CAAJA,WAAAA,KAAJ,EAAA,EAA6B;AAE3BF,QAAAA,EAAE,GAAFA,IAAAA;AAFF;AAMD;AAVHD,GAAAA;AAaA,SAAOC,EAAE,GAAA,QAAA,GAAT,IAAA;AArBK,CAAP","sourcesContent":["import firebase from 'firebase'\n\nlet database // will contain current environment db config.\n\nvar firebaseConfig = {\n  apiKey: 'AIzaSyB0pXi3EBdc9p33uQvDMQG6SeCeuzpcHDk',\n  authDomain: 'react-togglr.firebaseapp.com',\n  databaseURL: 'https://react-togglr.firebaseio.com',\n  projectId: 'react-togglr',\n  storageBucket: 'react-togglr.appspot.com',\n  messagingSenderId: '883468833586',\n  appId: '1:883468833586:web:cf53cab617302ab2f87d2b',\n  measurementId: 'G-NHR0E20SST'\n}\n\ndatabase = firebase.initializeApp(firebaseConfig)\nfirebase.analytics()\n\nexport default database\n","import React, { useEffect, useState, useContext } from 'react'\n\nimport database from './database'\n\nconst FeatureFlagContext = React.createContext([])\n\nexport const FeatureFlagProvider = ({\n  organizationKey,\n  environment,\n  children\n}) => {\n  const [flagsRetrieved, setFlagsRetrieved] = useState({})\n\n  useEffect(() => {\n    if (!organizationKey) {\n      console.error('togglr-js configiration error: No organizationKey set')\n      return\n    }\n\n    const clientFlags = database\n      .database()\n      .ref(`organizations/${organizationKey}/flags`)\n\n    clientFlags.on('value', (snapshot) => {\n      const flags = snapshot.val()\n      console.log('FLAGS', flags)\n\n      if (flags) {\n        setFlagsRetrieved(flags)\n      } else {\n        setFlagsRetrieved({})\n      }\n    })\n  }, [])\n\n  const FLAG_CONTEXT_DATA = {\n    environment,\n    flags: flagsRetrieved\n  }\n\n  return (\n    <FeatureFlagContext.Provider value={FLAG_CONTEXT_DATA}>\n      {children}\n    </FeatureFlagContext.Provider>\n  )\n}\n\nexport const FeatureFlag = ({ flagName = '', children }) => {\n  const context = useContext(FeatureFlagContext)\n  if (!Object.keys(context.flags).length) return null\n\n  const { flags, environment } = context\n\n  let on = false\n\n  Object.keys(context.flags).forEach((key) => {\n    const flag = context.flags[key]\n    if (flag.flagKeyName === flagName && flag.active) {\n      console.log('HIT?', flag.environment)\n      if (flag.environment === '') {\n        // configured for all environements\n        on = true\n      } else {\n        // configured for specifics only\n      }\n    }\n  })\n\n  return on ? children : null\n}\n"]},"metadata":{},"sourceType":"module"}